name: Build and deploy dPro
on:
  push:
    branches:
      - main
  release:
    types: [published]

env:
  IMAGE: dpro

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.MB_AWS_ACCESS_KEY }} # todo: use IAM OIDC
          aws-secret-access-key: ${{ secrets.MB_AWS_SECRET }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Determine deployment environment
        run: |
          if [[ $GITHUB_EVENT_NAME == "push" ]]; then
            echo "DEPLOYMENT_ENV=staging" >> $GITHUB_ENV
          elif [[ $GITHUB_EVENT_NAME == "release" ]]; then
            echo "DEPLOYMENT_ENV=production" >> $GITHUB_ENV
          else
            echo "Error: Cannot determine deployment environment" >&2
            exit 1
          fi

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE }}
          tags: |
            type=sha,prefix={{branch}}-,suffix=-{{date 'X'}},format=short,enable=${{ env.DEPLOYMENT_ENV == 'staging' }}
            type=semver,pattern=v{{version}},enable=${{ env.DEPLOYMENT_ENV == 'production' }}
            type=sha

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Install ORAS CLI
        run: |
          curl -LO https://github.com/oras-project/oras/releases/download/v1.1.0/oras_1.1.0_linux_amd64.tar.gz
          tar -xzf oras_1.1.0_linux_amd64.tar.gz oras
          sudo mv oras /usr/local/bin/

      - name: Install kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/

      - name: Extract docker tag
        id: dockertag
        run: |
          TAG=$(echo '${{ steps.meta.outputs.tags }}' | head -n 1 | cut -d ':' -f 2)
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Set image tag
        run: |
          cd .kube/overlays/${{ env.DEPLOYMENT_ENV }}
          IMAGE='${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE }}'
          TAG='${{ steps.dockertag.outputs.tag }}'
          kustomize edit set image "dpro=$IMAGE:$TAG"

      - name: Kustomize
        run: |
          kustomize build '.kube/overlays/${{ env.DEPLOYMENT_ENV }}' > manifests.yaml

      - name: Zip manifests
        run: |
          tar -czf manifests.tar.gz -C . manifests.yaml
          ls -la | grep manifests

      - name: Push manifests to ECR
        run: |
          REGISTRY='${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE }}/kustomization'

          if [[ "${{ env.DEPLOYMENT_ENV }}" == "production" ]]; then
            TAG='${{ steps.dockertag.outputs.tag }}'
          else
            TAG='${{ env.DEPLOYMENT_ENV }}'
          fi

          oras push "$REGISTRY:$TAG" manifests.tar.gz:application/gzip

      - name: Log out of Amazon ECR
        run: docker logout ${{ steps.login-ecr.outputs.registry }}
